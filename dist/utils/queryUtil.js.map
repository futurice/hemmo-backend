{"version":3,"sources":["../../src/utils/queryUtil.js"],"names":[],"mappings":"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","file":"queryUtil.js","sourcesContent":["'use strict';\n\nimport Promise from 'bluebird';\nimport Boom from 'boom';\nimport _ from 'lodash';\nimport db from '../db';\nimport letterCase from './letterCaseUtil';\n\nmodule.exports = {\n  findAllBy,\n  findOneBy,\n  findById,\n  insertWithTimestamps,\n  updateWithTimestamps,\n  insertAndReturn,\n  updateAndReturn,\n  modelify,\n  dbify,\n  single,\n  exists,\n  existsCaseInsensitiveForColumn\n};\n\n// guards a unary function fn so that it is only called when the passed\n// argument is an object that is not an error - otherwise passes the argument\n// through as is\nfunction passthrough(argument, fn) {\n  if (!_.isObject(argument) ||\n    argument.isBoom ||\n    argument instanceof Error) {\n    return argument;\n  }\n\n  return fn(argument);\n}\n\nfunction findAllBy(table, query) {\n  return db(table)\n    .select()\n    .where(dbify(query))\n    .then(rows => rows.map(modelify));\n}\n\nfunction findOneBy(table, query) {\n  return db(table)\n    .first()\n    .where(dbify(query))\n    .then(modelify);\n}\n\nfunction findById(table, id) {\n  return findOneBy(table, {id: +id});\n}\n\nfunction postgresExistsTransformation(countResult) {\n  // Postgres specific implementation, it returns a string instead of number\n  // More info: https://github.com/tgriesser/knex/issues/387\n  return (countResult.count === '0' || countResult.count === 0) ? false : true;\n}\n\nfunction exists(table, query) {\n  return db(table)\n    .count('*')\n    .where(dbify(query))\n    .first()\n    .then(postgresExistsTransformation);\n}\n\nfunction existsCaseInsensitiveForColumn(table, column, value, idToExclude) {\n  let query = db(table)\n    .count('*')\n    .whereRaw(`LOWER(${dbify(column)}) = ?`, value.toLowerCase());\n\n  if (idToExclude && _.isNumber(idToExclude)) {\n    query = query.andWhereNot('id', idToExclude);\n  }\n\n  return query\n    .first()\n    .then(postgresExistsTransformation);\n}\n\nfunction insertWithTimestamps(table, model) {\n  if (model.id) {\n    return Promise.reject('Cannot insert entity to ' + table +\n      'because the entity already has an id:' + JSON.stringify(model));\n  }\n\n  return db(table)\n    .returning('id')\n    .insert(timestamp(dbify(model)))\n    .then(createdIds => {\n      if (!createdIds || createdIds.length !== 1) {\n        throw new Error(\n          `Insert failed, expected to receive created entity id, received ${createdIds}`);\n      }\n      return createdIds[0];\n    })\n    .catch((error) => {\n      // This part is a bit sketchy as it turns a failing promise into\n      // a successful promise that contains an error\n      console.log('Failed to insert entity to ' + table + ': ' + error);\n      return error;\n    });\n}\n\nfunction updateWithTimestamps(table, model) {\n  const id = model.id;\n\n  if (!id) {\n    return Promise.reject('Cannot update entity in ' + table +\n      'because the entity is missing an id:' + JSON.stringify(model));\n  }\n\n  return db(table)\n    .where('id', id)\n    .update(timestamp(dbify(model)))\n    .then(rowsUpdated => {\n      if (!rowsUpdated) {\n        throw new Error(`Update failed, record by ${id} does not exist in ${table}`);\n      }\n      return id;\n    });\n}\n\nfunction insertAndReturn(table, model) {\n  return insertWithTimestamps(table, model)\n    .then(id => findById(table, id));\n}\n\nfunction updateAndReturn(table, model) {\n  return updateWithTimestamps(table, model)\n    .then(id => findById(table, id));\n}\n\nfunction timestamp(record) {\n  if (record && (record.createdAt || record.updatedAt)) {\n    throw new Error('queryMapper.timestamp should be called with a database record, ' +\n    'not a model object. Consider passing model through `dbify` before timstamping');\n  }\n\n  const now = new Date();\n\n  record.updated_at = now;\n\n  // if entity has an id, its created_at value should not be overridden\n  if (!record.id) {\n    record.created_at = now;\n  }\n\n  return record;\n}\n\n/**\n * Converts a database record object to a API-friendly return object.\n *\n * This method should be called for all db records before reply(), given\n * the record is not explicitly formatted as a part of the query or query\n * callback.\n *\n * @param {Object} record Object returned from a db query, or a Boom error\n *\n * @returns {Object} Formatted model object, or Boom as-is\n */\nfunction modelify(record) {\n  return passthrough(record, letterCase.camelKeys);\n}\n\n/**\n * Converts a model object to DB-friendly record object\n *\n * Reverse of modelify.\n *\n * @param {Object} record Object ready to be inserted/updated to the database\n *\n * @returns {Object} Formatted record object\n */\nfunction dbify(model) {\n  return passthrough(model, letterCase.underscoreKeys);\n}\n\nfunction single(records) {\n  if (!records || records.length === 0) {\n    return Boom.notFound();\n  }\n\n  if (records.length > 1) {\n    return Boom.badImplementation('Query returned too many records. ' +\n      'Expected one, received:' + records);\n  }\n\n  return records[0];\n}\n"]}