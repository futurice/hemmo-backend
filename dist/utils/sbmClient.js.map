{"version":3,"sources":["../../src/utils/sbmClient.js"],"names":[],"mappings":";;;;;;;;QAQgB,Y,GAAA,Y;QAqBA,iB,GAAA,iB;QA0BA,yB,GAAA,yB;;AAtDhB;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,oBAAoB,IAAxB;AACA,IAAI,yBAAyB,IAA7B;;AAEO,SAAS,YAAT,GAAwB;AAC7B,MAAI,iBAAJ,EAAuB;AACrB,WAAO,mBAAQ,OAAR,CAAgB,iBAAhB,CAAP;AACD;;;AAGD,SAAO,0BAA0B;AAC/B,UAAM,iBAAO,GAAP,CAAW,IADc;AAE/B,UAAM,EAFyB;AAG/B,0BAAsB,SAHS;AAI/B,SAAK,iBAAO,GAAP,CAAW,GAJe;AAK/B,SAAK,iBAAO,GAAP,CAAW;AALe,GAA1B,EAON,IAPM,CAOD,UAAU;AACd,WAAQ,oBAAoB,MAA5B;AACD,GATM,EAUN,KAVM,CAUA,SAAS;AACd,UAAM,KAAN;AACD,GAZM,CAAP;AAaD;;AAEM,SAAS,iBAAT,GAA6B;AAClC,MAAI,sBAAJ,EAA4B;AAC1B,WAAO,mBAAQ,OAAR,CAAgB,sBAAhB,CAAP;AACD;;;AAGD,SAAO,0BAA0B;AAC/B,UAAM,iBAAO,GAAP,CAAW,IADc;AAE/B,UAAM,EAAC,MAAM,QAAP,EAFyB;AAG/B,0BAAsB,cAHS;AAI/B,SAAK,iBAAO,GAAP,CAAW,GAJe;AAK/B,cAAU,iBAAO,GAAP,CAAW,IALU;AAM/B,cAAU,iBAAO,GAAP,CAAW;AANU,GAA1B,EAQN,IARM,CAQD,UAAU;AACd,WAAQ,yBAAyB,MAAjC;AACD,GAVM,EAWN,KAXM,CAWA,SAAS;AACd,UAAM,KAAN;AACD,GAbM,CAAP;AAcD;;;;;;AAMM,SAAS,yBAAT,CAAmC,aAAnC,EAAkD;AACvD,QAAM,cAAc,kBAAI,MAAJ,CAAW,OAAX,CAAmB,GAAnB,EAAwB,cAAc,IAAtC,CAApB;AACA,QAAM,YAAY,mBAAQ,SAAR,CAAkB,YAAY,IAA9B,EAAoC,EAAC,SAAS,WAAV,EAApC,CAAlB;AACA,QAAM,YAAY,EAAC,OAAO,IAAR,EAAc,MAAM,QAApB,EAAlB;;;AAGA,QAAM,kBAAkB,cAAc,QAAd,GACpB,UACE,cADF,EAEE,CAAC,cAAc,GAAf,EAAoB,cAAc,QAAlC,EAA4C,cAAc,QAA1D,CAFF,EAGE,SAHF,CADoB,GAMpB,UACE,UADF,EAEE,CAAC,cAAc,GAAf,EAAoB,cAAc,GAAlC,CAFF,EAGE,SAHF,CANJ;;AAYA,SAAO,gBAAgB,IAAhB,CAAsB,KAAD,IAAW;;;;AAIrC,UAAM,SAAS,kBAAI,MAAJ,CAAW,OAAX,CAAmB,GAAnB,EAAwB,cAAc,IAAtC,CAAf;AACA,WAAO,WAAP,GAAqB,SAAS,kBAAT,CAA4B,OAA5B,EAAqC;AACxD,aAAO,MAAP,CAAc,OAAd,EAAuB;AACrB,2BAAmB,cAAc,GADZ;AAErB,SAAC,cAAc,oBAAf,GAAsC;AAFjB,OAAvB;AAID,KALoB,CAKnB,IALmB,CAKd,MALc,CAArB;;;AAQA,UAAM,aAAa,mBAAQ,SAAR,CAAkB,OAAO,IAAzB,EAA+B,EAAC,SAAS,MAAV,EAA/B,CAAnB;;;;AAIA,WAAO,SAAS,cAAT,CAAwB,MAAxB,EAAgC,IAAhC,EAAsC;;AAE3C,YAAM,cAAc,cAAc,IAAd,IAAsB,EAA1C;AACA,YAAM,0BAAiB,WAAjB,IAA8B,OAAO,IAArC,GAAN;;AAEA,aAAO,WAAW,MAAX,EAAmB,IAAnB,EAAyB,UAAzB,CAAP;AACD,KAND;AAOD,GAxBM,CAAP;AAyBD","file":"sbmClient.js","sourcesContent":["\nimport rpc from 'json-rpc2';\nimport Promise from 'bluebird';\nimport config from '../config';\n\nlet sbmClientInstance = null;\nlet sbmAdminClientInstance = null;\n\nexport function getSbmClient() {\n  if (sbmClientInstance) {\n    return Promise.resolve(sbmClientInstance);\n  }\n\n  // log in with API key\n  return createAuthenticatedClient({\n    host: config.sbm.host,\n    opts: {},\n    authenticationHeader: 'X-Token',\n    org: config.sbm.org,\n    key: config.sbm.key\n  })\n  .then(client => {\n    return (sbmClientInstance = client);\n  })\n  .catch(error => {\n    throw error;\n  });\n}\n\nexport function getSbmAdminClient() {\n  if (sbmAdminClientInstance) {\n    return Promise.resolve(sbmAdminClientInstance);\n  }\n\n  // log in with administrative user username/password\n  return createAuthenticatedClient({\n    host: config.sbm.host,\n    opts: {path: '/admin'},\n    authenticationHeader: 'X-User-Token',\n    org: config.sbm.org,\n    username: config.sbm.user,\n    password: config.sbm.password\n  })\n  .then(client => {\n    return (sbmAdminClientInstance = client);\n  })\n  .catch(error => {\n    throw error;\n  });\n}\n\n/**\n * Creates a only slightly hacky SimplyBookMe JSON RPC 2.0 client over the given\n * endpoint. See usage for configuration options :)\n */\nexport function createAuthenticatedClient(configuration) {\n  const loginClient = rpc.Client.$create(443, configuration.host);\n  const loginCall = Promise.promisify(loginClient.call, {context: loginClient});\n  const loginOpts = {https: true, path: '/login'};\n\n  // we call a different method for username:password authentication and key auth\n  const onLoginComplete = configuration.username\n    ? loginCall(\n        'getUserToken',\n        [configuration.org, configuration.username, configuration.password],\n        loginOpts\n      )\n    : loginCall(\n        'getToken',\n        [configuration.org, configuration.key],\n        loginOpts\n      );\n\n  return onLoginComplete.then((token) => {\n\n    // Create a client that authenticates with the non-standard authentication\n    // headers used by SimplyBookMe\n    const client = rpc.Client.$create(443, configuration.host);\n    client._authHeader = function authHeaderOverride(headers) {\n      Object.assign(headers, {\n        'X-Company-Login': configuration.org,\n        [configuration.authenticationHeader]: token\n      });\n    }.bind(client);\n\n    // Converts a node callback style method to a promise-returning one\n    const callMethod = Promise.promisify(client.call, {context: client});\n\n    // Returns a fn(method, [...args]) that can be called to execute JSON RPC\n    // calls over HTTPS to the given client\n    return function sbmClientProxy(method, args) {\n      // force all traffic over SSL\n      const defaultOpts = configuration.opts || {};\n      const mergedOpts = {...defaultOpts, https: true};\n\n      return callMethod(method, args, mergedOpts);\n    };\n  });\n}\n"]}