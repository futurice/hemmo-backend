{"version":3,"sources":["../../src/utils/timeUtil.js"],"names":[],"mappings":";;;;;QAUgB,a,GAAA,a;QA8BA,a,GAAA,a;QAOA,a,GAAA,a;QAIA,a,GAAA,a;QAIA,a,GAAA,a;QAIA,e,GAAA,e;;AA3DhB;;;;AACA;;;;;;AAEA,MAAM,cAAc,YAApB;AACA,MAAM,cAAc,OAApB;AACA,MAAM,mBAAmB,qBAAzB;;AAEA,MAAM,0BAA0B,EAAhC;AACA,MAAM,uBAAuB,EAA7B;;AAEO,SAAS,aAAT,CAAuB,EAAC,IAAD,EAAO,EAAP,EAAvB,EAAmC;AACxC,QAAM,QAAQ,sBAAO,IAAP,EAAa,WAAb,CAAd;AACA,QAAM,MAAM,sBAAO,EAAP,EAAW,WAAX,CAAZ;AACA,QAAM,QAAQ,EAAd;;AAEA,MAAI,UAAU,KAAd;AACA,SAAO,QAAQ,MAAR,GAAiB,OAAjB,KAA6B,IAAI,MAAJ,GAAa,OAAb,EAApC,EAA4D;AAC1D,QAAI,CAAC,QAAQ,OAAR,EAAL,EAAwB;AACtB,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,UAAM,IAAN,CAAW;AACT,YAAM,QAAQ,MAAR,CAAe,WAAf,CADG;AAET,UAAI,QAAQ,GAAR,CAAY,uBAAZ,EAAqC,SAArC,EAAgD,MAAhD,CAAuD,WAAvD,C;AAFK,KAAX;;AAKA,cAAU,QAAQ,GAAR,CAAY,oBAAZ,EAAkC,SAAlC,CAAV;AACD;;AAED,SAAO,KAAP;AACD;;;;;;;;;;AAUM,SAAS,aAAT,CAAuB,IAAvB,EAA6B,IAA7B,EAAmC,YAAnC,EAAiD,UAAjD,EAA6D;AAClE,SAAO,yBACJ,EADI,CACD,CAAC,AAAD,GAAG,IAAH,EAAQ,CAAR,GAAW,IAAX,EAAgB,AAAhB,CADC,EACkB,YADlB,EAEJ,EAFI,CAED,UAFC,EAGJ,MAHI,CAGG,WAHH,CAAP;AAID;;AAEM,SAAS,aAAT,CAAuB,cAAvB,EAAuC;AAC5C,SAAO,sBAAO,cAAP,EAAuB,gBAAvB,EAAyC,MAAzC,CAAgD,WAAhD,CAAP;AACD;;AAEM,SAAS,aAAT,CAAuB,cAAvB,EAAuC;AAC5C,SAAO,sBAAO,cAAP,EAAuB,gBAAvB,EAAyC,MAAzC,CAAgD,WAAhD,CAAP;AACD;;AAEM,SAAS,aAAT,CAAuB,UAAvB,EAAmC;AACxC,SAAO,sBAAO,UAAP,EAAmB,WAAnB,EAAgC,UAAhC,EAAP;AACD;;AAEM,SAAS,eAAT,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B;AACpC,SAAO,EAAE,EAAF,GAAO,EAAE,IAAT,IAAiB,EAAE,IAAF,GAAS,EAAE,EAAnC;AACD","file":"timeUtil.js","sourcesContent":["import moment from 'moment';\nimport momentTz from 'moment-timezone';\n\nconst DATE_FORMAT = 'YYYY-MM-DD';\nconst TIME_FORMAT = 'HH:mm';\nconst DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\nconst LESSON_DURATION_MINUTES = 50;\nconst LESSON_BREAK_MINUTES = 10;\n\nexport function windowToSlots({from, to}) {\n  const start = moment(from, TIME_FORMAT);\n  const end = moment(to, TIME_FORMAT);\n  const slots = [];\n\n  let current = start;\n  while (current.toDate().getTime() < end.toDate().getTime()) {\n    if (!current.isValid()) {\n      throw new Error('Slot start date is not valid!');\n    }\n\n    slots.push({\n      from: current.format(TIME_FORMAT),\n      to: current.add(LESSON_DURATION_MINUTES, 'minutes').format(TIME_FORMAT) // mutates!\n    });\n\n    current = current.add(LESSON_BREAK_MINUTES, 'minutes');\n  }\n\n  return slots;\n}\n\n/**\n * Converts a time and date from one timezone to another time\n * @param {String} time 'HH:mm'\n * @param {String} date 'YYYY-MM-DD'\n * @param {String} fromTimezone TZ* e.g. 'America/Bogota'\n * @param {String} toTimezone TZ* e.g. 'Europe/London'\n * @returns {String} 'HH:mm'\n */\nexport function shiftTimezone(time, date, fromTimezone, toTimezone) {\n  return momentTz\n    .tz(`${date} ${time}`, fromTimezone)\n    .tz(toTimezone)\n    .format(TIME_FORMAT);\n}\n\nexport function getTimeString(dateTimeString) {\n  return moment(dateTimeString, DATE_TIME_FORMAT).format(TIME_FORMAT);\n}\n\nexport function getDateString(dateTimeString) {\n  return moment(dateTimeString, DATE_TIME_FORMAT).format(DATE_FORMAT);\n}\n\nexport function getISOWeekDay(dateString) {\n  return moment(dateString, DATE_FORMAT).isoWeekday();\n}\n\nexport function rangesIntersect(a, b) {\n  return a.to > b.from && a.from < b.to;\n}\n"]}